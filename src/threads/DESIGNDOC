			+-------------------+
			|      CSE 451      |
			| PROJECT 1: Thread |
			|  DESIGN DOCUMENT  |
			+-------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Matthew Bryan   mmattb@cs.washington.edu
Jijiang Yan     jjyan@cs.washington.edu


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

All credits are Matthew's and all mistakes are Jijiang's really.

(We didn't use any offline resources)


        CONTEXT SWITCHING
        =================

>> C1: When 'first yielder' finishes, which thread deletes its stack? Why?

When 'first yielder' finishes by calling thread_exit(), 'second yielder' 
will delete its stack. Because when 'first yielder' calls thread_exit(), it
switches thread from 'first yielder' to 'second yielder' which is now the 
running thread, under which thread_schedule_tail is called. At that moment 
the 'first yielder' thread is alreay in status THREAD_DYING, hence its stack
would be cleaned by 'second yielder' thread.

>> C2: Give the backtrace of the kernel stack of a thread suspended
>> by a timer interrupt.

#0  switch_threads () at ../../threads/switch.S:41
#1  0xc0020f99 in schedule () at ../../threads/thread.c:624
#2  0xc002101c in thread_yield () at ../../threads/thread.c:352
#3  0xc00217fa in intr_handler (frame=0xc0104f7c)
    at ../../threads/interrupt.c:400
#4  0xc00218f3 in intr_entry () at ../../threads/intr-stubs.S:37
#5  0xc0104f7c in ?? ()
#6  0x00000001 in ?? ()


			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

The struct sleepingTimer is a clock alarm for a thread who is put 
to sleep. The inner struct sentinel is used to record the remaining 
time for a particular thread in sleeping. When the remaining time
expires, the thread will be woken up. The list sleepingTimers in 
timer.c is used to record the list of sleeping threads. This is
updated when timer interrupt occurres. 

A 'sleepingTimer' is a timer that used to record how long a thread
needs to sleep before it's back to ready status again.  
(Struct added in timer.h)
/* Used to track all timers waiting to wake up */
struct sleepingTimer
  {
    struct sentinel s;
    struct list_elem listElems;   // List element to get to other timers 
  };

A 'sentinel' is a synchronization primitive we came up with that works
for timers but could be used in other contexts as well. A thread waits
for the resource to run out and then is awoken.  In this case the 
'resource' is the amount of time left on the timer.
(Struct added in synch.h)
/* Resource sentinel - wake a thread when all resources exhausted */
struct sentinel
  {
    int64_t remaining;
    struct thread * t;
  };

A 'sleepingTimers' is a list of alarm clocks.
(Static variable added a struct list in timer.c)
/* A list of sleeping threads */
static struct list sleepingTimers;


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

thread_sleep() initializes an alarm clock 'sleepingTimer' with its initial
remaining time and adds it onto the list of alarm clocks 'sleepingTimers.' 
Then it calls sentinel_twiddle() to give that timer to the current running 
thread, which is immediately blocked. Later when a time interruption occurs,
the timer interrupt handler loops through all the alarm clocks/threads on 
sleepingTimers, decrements their remaining time. If its value is already 0, 
time is up, the corresponding thread is unblocked, and the alarm clock is 
removed from sleepingTimers; Otherwise we still put the alarm clock on the 
sleepingTimers list.  When we unblock, we do not consider a schedule decision
immediately since there may be many timers waking up at once and we do not
want to waste work given their differing priorities.  Instead, we test if the
ready list has a higher priority thread on it.  If this is the case, like with 
thread_tick(), we just call intr_yield_on_return(). 

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Since we need to loop through all alarm clocks once at least, the best running
time is O(n) where n is the number of timers. Our method just reached every one
of them no more no less. Hence in this sense it's optimized. 

Also, we reduce the amount of computation we do to wake timers up.  As mentioned
above, since we unblock threads and add them to the ready queue but do not test 
their priority against the currently running thread, we save time.  Instead, we 
make one check against the head of the ready list at the end of the interrupt, 
which is much more efficient.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

We disable interrupts during this function call.  That prevents any 
mechanism that could slice another thread in to this same segment of 
code or another segment that uses the same data structures.  We chose 
this over locks for various reasons.  See answer to A5.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

We considered various locking mechanisms for this but decided ultimately 
to turn interrupts off for this method instead.  Though this is a coarse 
use of that interrupt-disabling technique, it was needed since if this 
thread held a lock on the sleepingTimer's list and then the timer interrupt 
attempted to access that list, it would go to sleep.  Since interrupts 
should never go to sleep, that was not an option here.  So we chose to 
simply turn off interrupts.  We considered turning interrupts off for only 
a small portion of this method, but followed the instructor's advice and 
protected the whole method instead.  Obviously since interrupts are off, 
no chance of race condition exists.  Since all code paths out of thread_block 
turn interrupts back on, we will ensure that timer interrupts will still occur.  
In other words, we ignored the warning in the comment above timer_sleep that 
'Interrupts must be turned on'.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This design has the advantage of splicing out the alarm clock struct 
'struct sleepingTimer' out of the thread structure. Only when we want
to put some thread into sleep, we assign an alarm clock to that thread. 
Moreover these alarm clocks are put onto a list, when time interrupt 
occurs we would only need to go through those threads holding an alarm
clock to decrement their remaining time.

As mentioned above, our method for waking theads has performance advantages
over using our normal thread_unblock() code path.

Finally, we considered building the remaining time into the sleepingTimer struct,
but decided that this resembled a useful synchonization primitive that could be
used in other places (e.g. for RAM running out and waking a thread to alert the
user).  So segmenting this function into a synchronization primitive allows us to
use this function elsewhere.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

'oldPriority' is used to record the priority before changing due to donation or set priority.
'blockingLock' is a pointer to the lock this thread is waiting for. 
'locksHeld' is a list of locks held by this thread.  
(Members added in 'struct thread' for priority scheduling/donation in thread.h)
	/* Used for priority scheduling/donation */
	int oldPriority;                    /* Priority before donation */
	struct lock *blockingLock;          /* Thread is waiting for this lock */
	struct list locksHeld;              /* List of locks held by thread */

A 'semaphore_elem' each corresponds a waiting thread on a lock's waiter list. 
The semaphore element is used to indicate whether the lock is FREE or BUSY. 
(Struct added in synch.h)
/* One semaphore in a list. */
struct semaphore_elem 
  {
    struct list_elem elem;              /* List element. */
    int priority;
    struct semaphore semaphore;         /* This semaphore. */
  };

This list_elem ELEM is used to track the various locks held by a thread. 
(Members added in 'struct lock' in synch.h)
	struct list_elem elem;      /* List of locks held by a thread */ 

The list_valid_func is used in bubble_up function to check whether a
list_elem E is a valid element of some type.  
(Typedef added in list.h)
/* Check if list_elem E is a valid one as opposed to the list head */          
typedef bool list_valid_func (const struct list_elem *e, void *aux);


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

		-------------         -------------         -------------
		|           |         |           |         |           |			
		|     n     |         |     n     |         |           |           
		|    [A]    |         |    [B]    |         |           |	
		|           |         |           |         |           |
		|           |  DONATE |           |  DONATE |           |
		|     L<----|---------|-----M<----|---------|-----H     |
		|           |         | ACQUIRE A |         | ACQUIRE B |
		-------------         -------------         -------------

We use a list of locks that every thread holds, together with the lock.holder pointer 
and a pointer in the thread to any lock it is currently blocking on.  So when, for 
instance, we attempt to acquire a lock, we can check what that lock's holder is and 
consider a donation.  Likewise, we can recursively consider donation since we have a 
pointer to any lock that thread is waiting on as well.

Nested donation is handled under this scheme via recursive calls to priority_donate.  
We always bubble priorities as far as we can.

A function which helps us keep a thread in its highest available priority at all times 
is max_available_priority.  It looks at the undonated priority (called 'oldPriority') 
and then at the highest priority of all waiters on all locks it holds.  We use this 
function in places like, for instance, thread_set_priority to make sure the thread always 
operates in the correct priority.


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

We replaced the habitual use of 'list_push_back' with 'list_insert_ordered.'  
This solves the problem very simply since all functions which use these lists 
always pop off the front.


>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

When we call lock.acquire, we test whether the thread is about to block 
on sema_down.  If it is, we set its blockingLock field to the current lock 
and call priority donation.  Priority donation, including nesting works as 
described in B2, so I refer you there. We consider donation for the lock's 
holder and recursively call priorityDonate.  Each time we call, we also 
bubble each thread upwards in the list of waiters that it finds itself in, 
provided we made a donation.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

In this case, we have saved the undonated priority of the releasing thread 
in a field called 'oldPriority.'  However, this may not be the priority we 
want to set to since the thread may hold other locks.  Instead, we call 
max_available_priority as described in B2.  This ensures that the releasing 
thread assumes the highest priority available to it.  We also remove this 
lock from the list of locks this thread holds and finally call sema_up to 
allow the higher thread to unblock and potentially begin running immediately.


---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

A potential race condition concerns the safety of simultaneous accesses to 
the ready list.  Suppose we are manipulating the ready list with a call to 
list_insert_ordered.  This call juggles several pointers when the new element 
is being added in.  If a time slice occurs when these elements are in an 
intermediate state, and the newly-running thread also accesses the ready list, 
a loop or break in the ready list could occur.

We considered using a lock for this situation but decided it was not appropriate.  
Interrupt handlers (e.g. the timer interrupt) could attempt to access the ready 
list while it is in the intermediate state, causing them to hang on the lock 
acquisition.  Interrupts should never go to sleep or be blocked.  As a result, 
we decided to block interrupts during this function call instead.  Once again, 
this is a coarse use of interrupt disabling, but we felt it was much safer than 
trying to use synchronization primitives.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This design is very elegant - all the algorithms used are very concisely written and
easy to understand.  Effectively, the webs of locks being mutual held and blocked on 
form a rooted, directed graph that can be traversed recursively from the newly blocking 
thread (a leaf) back up to the root (the only thread in the graph that is not blocked).  
This allows priority donation to bubble as far as possible.

Also, using lists of held locks and checking the priority of the highest waiter on each 
of their lists makes updating the priority of the current thread very easy.  It effectively 
forms a list of priorities available to the thread at any point in time.  These lists 
automatically get updated when threads are released or the priorities of waiters are changed.

I considered keeping other lists within the thread itself, for instance a list of all 
threads waiting on this one for any reason, and within the list elements we would have the 
priority available to the thread.  But the downside of this structure is that it is much 
more complicated to manipulate since we have to figure out how to get elements on and off 
the list.  The design I chose uses the existing lock waiters lists much more, which saves 
on having to do that.
